# PLCRVoting.sol
# each poll is an instance of a vote on a singal (ERC721 token in the TCR)
type Poll @entity {
    id: ID!
    creator: Bytes!
    commitEndDate: BigInt!
    revealEndDate: BigInt!
    voteQuorum: BigInt!
    votesFor: BigInt!
    votesAgainst: BigInt!
    didCommit: [Bytes!]!                            # if an address is in here, they did commit a vote
    didReveal: [Bytes!]!                            # if an address is in here, they did reveal their vote
    totalTokens: BigInt!
    challenge: Challenge                           # 1to1 relationship with the challenge, they share IDs
    votes: [Vote!]! @derivedFrom(field: "pollID")
}

# Votes represent the DLL and the attribute store.
# To get locked tokens, everytime a vote is commited, or revealed, or tokens
# are rescued on those event triggers the subgraph must call getLockedTokens().
# This is  in @entity User
type Vote @entity {
    id: ID!                             # concatenation of POLLID-ETHADDRESS
    pollID: BigInt!                     # for relational connections
    user: Bytes!                        # for relational connections
    numTokens: BigInt!
    votedFor: Boolean                   # true means voted for, false agaisnt, null unknown
    revealed: Boolean!                  # commited = false. revealed = true. revealed means it is no longer influencing locked tokens, and has been removed from DLL
}

# Registry.sol
type Listing @entity {
    id: ID!
    owner: Bytes!
    whitelist: Boolean!
    applicationExpiry: BigInt!
    unstakedDeposit: BigInt!
    data: String!                       # extra data (think ipfs hashes)
    challengeID: BigInt
    deleted: Boolean!                   # when true, listing has been deleted from the smart contract
    challenges: [Challenge!]! @derivedFrom(field:"listing") # array of all challenges. Active is challenge.resolved = false
}

# is this a duplicate entity? or do two types of challenges exist?
type Challenge @entity {
    id: ID!                             # The challenge ID (same as poll ID)
    rewardPool: BigInt!                 # (remaining) Pool of tokens to be distributed to winning voters
    challenger: Bytes!                  # Owner of the challenge
    resolved: Boolean!                  # Indicates if the challenge is resolved (success or fail)
    stake: BigInt!                      # Number of tokens at stake for either party during challenge
    totalTokens: BigInt!                # (remaining number of tokens used in voting by the winning side
    votersClaimed: [Bytes!]!            # If an address is in this array, it has claimed its reward
    data: String!                       # extra data (think ipfs hashes)
    passed: Boolean                     # whether or not it passed. null if not decided yet
    poll: Poll!                         # 1 to 1 relationship with the poll, they share IDs
    listing: Listing!
}

# All solidity, including Token.sol
# User is both a cartographer, and a challenger, or just a token holder doing nothing
type User @entity {
    id: ID!                                                             # eth address

    # Registry.sol
    numApplications: BigInt!    # also stored as mapping public var. Smart contract only counts increases. Related to the Proof of use contract (POU)
    totalStaked: BigInt!        # also stored as mapping public var. Smart contract only counts increases. Related to the Proof of use contract (POU)
    listings: [Listing!]! @derivedFrom(field: "owner")
    challenges: [Challenge!]! @derivedFrom(field: "challenger")

    # FROM PLCRVoting.sol
    createdPolls: [Poll!]! @derivedFrom(field: "creator")       # note - right now all polls are created by Registry.sol
    votes: [Vote!]! @derivedFrom(field: "user")
    totalVotes: BigInt!   # how many tokens they've allocated to PLCR contract
    lockedVotes: BigInt!    # call getLockedTokens() after every commit or reveal or TokensRescued

    # Token.sol (FOAM Token)
    foamBalance: BigInt!

    # SignalToken.sol
    signals: [Signal!]! @derivedFrom(field:"owner")                     # ERC-721
}

# Signal does not interface with Registry, i.e. SignalToken.sol is independant of the other smart contracts
type Signal @entity {
    id: ID!             # signal token ID
    owner: Bytes!
    cst: Bytes
    nftAddress: Bytes
    geohash: Bytes
    radius: BigInt
}